rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Allow users to read and write their own quiz attempts
    match /quizAttempts/{attemptId} {
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['userId', 'quizType', 'score', 'totalQuestions'])
        && request.resource.data.score is number
        && request.resource.data.totalQuestions is number
        && (request.resource.data.timeSpent == null || request.resource.data.timeSpent is number)
        && (request.resource.data.timestamp == null || request.resource.data.timestamp is number);
      
      allow read, get: if isAuthenticated() 
        && (resource == null || resource.data.userId == request.auth.uid);
      
      allow list: if isAuthenticated()
        && request.query.filters.size() >= 1
        && request.query.filters[0].op == "=="
        && request.query.filters[0].field == "userId"
        && request.query.filters[0].value == request.auth.uid;
    }

    // Allow access to questions collection with more permissive rules
    match /questions/{questionId} {
      allow read, get, list: if isAuthenticated();
      allow create: if isAuthenticated();  // Allow authenticated users to create questions
      allow update, delete: if false;  // Still restrict update and delete to admins
    }

    // Allow access to question categories/metadata
    match /questionCategories/{categoryId} {
      allow read: if isAuthenticated();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 